

=== edit_settings ===
<b> Edit Settings </b> #CLEAR
+ [Party Size ({stat_party_size})] -> edit_party_size ->
+ [Level ({stat_level})] -> edit_level ->
+ [Terrain ({DisplayTerrain()})] -> edit_terrain ->
+ [Season ({DisplaySeason()})] -> edit_season ->
+ [Time ({DisplayTime()})] -> edit_time ->
+ [Population Density ({DisplayPopulation()})] -> edit_population ->
+ [Urban Size ({DisplayUrbanSize()})] -> edit_urban_size ->
+ [Roll {urban_size == urb_unknown:Shops|{DisplayUrbanSize()} Shops<br>} {urban_shops:({urban_shops})}]
    {urban_size == urb_unknown: -> edit_urban_size ->}
    ~ RollShops()
+ [Dungeon Size ({DisplayDungeonSize()})] -> edit_dungeon_size ->
+ [Dungeon Type ({DisplayDungeonType()})] -> edit_dungeon_type ->
+ [Survival Bonus ({DisplayBonus(stat_survival_bonus)})] -> edit_survival ->
+ [Back] ->->

- -> edit_settings

=== edit_urban_shops ===
{urban_size == urb_unknown: -> edit_urban_size ->}
Current {DisplayUrbanSize()} Shops: {urban_shops}

+ [Random]
    ~ RollShops()

Current {DisplayUrbanSize()} Shops: {urban_shops}

- ->->

=== function RollShops() ===
~ CheckShop(tavern, 10, 8, 6, 4, 2, 1)
~ CheckShop(supplies, 17, 14, 10, 5, 2, 1)
~ CheckShop(mounts, 12, 11, 9, 7, 5, 3)
~ CheckShop(books, 18, 17, 15, 13, 11, 9)
~ CheckShop(gems, 20, 19, 18, 16, 14, 12)
~ CheckShop(armourer, 18, 16, 14, 12, 10, 8)
~ CheckShop(bank, 17, 15, 13, 10, 8, 6)
~ CheckShop(tinkerer, 18, 17, 15, 13, 11, 9)
~ CheckShop(tailor, 15, 13, 11, 10, 8, 6)
~ CheckShop(potions, 18, 17, 16, 14, 12, 10)
~ CheckShop(idols, 16, 15, 13, 11, 9, 7)
~ CheckShop(food, 14, 12, 10, 8, 6, 4)
~ CheckShop(temple, 16, 14, 12, 10, 8, 6)
~ CheckShop(tomes, 20, 19, 17, 15, 13, 11)
~ CheckShop(thieving, 19, 18, 16, 14, 12, 10)
~ CheckShop(weapons, 17, 15, 13, 11, 9, 7)
~ CheckShop(vehicles, 15, 12, 13, 10, 8, 6)
~ CheckShop(guild, 19, 18, 16, 14, 12, 10)
~ CheckShop(magic_items, 25, 22, 19, 16, 15, 14)
~ CheckShop(blacksmith, 12, 10, 8, 6, 4, 2)
~ CheckShop(resurrection, 20, 19, 18, 17, 16, 16)
~ CheckShop(couriers, 19, 18, 17, 15, 13, 11)
~ CheckShop(brothel, 17, 15, 13, 11, 9, 7)
~ CheckShop(realty, 16, 15, 13, 10, 8, 6)
~ CheckShop(carpenter, 15, 13, 10, 8, 6, 4)
~ CheckShop(theatre, 20, 18, 16, 13, 11, 9)
~ CheckShop(healer, 18, 15, 12, 10, 7, 4)
~ CheckShop(boats, 19, 18, 16, 14, 12, 10)
~ CheckShop(union, 19, 18, 16, 11, 9, 7)
~ CheckShop(stonemason, 18, 15, 12, 10, 7, 4)
~ CheckShop(university, -1, -1, 18, 16, 14, 12)
~ CheckShop(mercenaries, 19, 18, 17, 16, 14, 12)


=== function CheckShop(shop, campT, hamT, vilT, townT, cityT, metT) ===
~ difficulty = -1

{ urban_size:
    - urb_camp: ~ difficulty = campT
    - urb_hamlet: ~ difficulty = hamT
    - urb_village: ~ difficulty = vilT
    - urb_town: ~ difficulty = townT
    - urb_city: ~ difficulty = cityT
    - urb_metropolis: ~ difficulty = metT
}

{ difficulty >= 0 && Check20(difficulty):
    ~ urban_shops += shop
- else:
    ~ urban_shops -= shop
}

=== function DisplayUrbanSize() ===
{urban_size:
    - urb_unknown: ~ return "Unknown Size"
    - urb_camp: ~ return "Encampment"
    - urb_hamlet: ~ return "Hamlet"
    - urb_village: ~ return "Village"
    - urb_town: ~ return "Town"
    - urb_city: ~ return "City"
    - urb_metropolis: ~ return "Metropolis"
}

=== function GetRandomUrbanSize() ===
{shuffle:
    - ~ return urb_camp
    - ~ return urb_hamlet
    - ~ return urb_village
    - ~ return urb_town
    - ~ return urb_city
    - ~ return urb_metropolis
}

=== edit_urban_size ===
Current Urban Size: {DisplayUrbanSize()}
What size is the urban area you are in?

+ [Random]
    ~ urban_size = GetRandomUrbanSize()

+ [Encampment]
    ~ urban_size = urb_camp

+ [Hamlet]
    ~ urban_size = urb_hamlet
    
+ [Village]
    ~ urban_size = urb_village

+ [Town]
    ~ urban_size = urb_town
    
+ [City]
    ~ urban_size = urb_city
    
+ [Metropolis]
    ~ urban_size = urb_metropolis

+ [Back] ->->

-
~ RollShops()
Current Urban Size: {DisplayUrbanSize()}
->->

==== function GetRandomTerrain() ===
{shuffle:
    - ~ return aquatic
    - ~ return coastal
    - ~ return desert
    - ~ return dungeon
    - ~ return forest
    - ~ return grass
    - ~ return hill
    - ~ return mountain
    - ~ return swamp
    - ~ return urban
}

==== function GetRandomWildernessTerrain() ===
{shuffle:
    - ~ return coastal
    - ~ return desert
    - ~ return forest
    - ~ return grass
    - ~ return hill
    - ~ return mountain
    - ~ return swamp
}

=== edit_terrain ===
Current Terrain: {DisplayTerrain()}
What terrain are you entering?

+ [Random]
    ~ terrain = GetRandomTerrain()

+ [Dungeon/Underdark]
    ~ terrain = dungeon

+ [Town/City]
    ~ terrain = urban

+ [Aquatic]
    ~ terrain = aquatic

+ [Coast]
    ~ terrain = coastal

+ [Desert]
    ~ terrain = desert

+ [Forest]
    ~ terrain = forest

+ [Grasslands]
    ~ terrain = grass

+ [Hills]
    ~ terrain = hill

+ [Mountain/Ice Steppes]
    ~ terrain = mountain

+ [Swamps]
    ~ terrain = swamp


+ [Back]

-

{inWilderness(): 
    -> roll_weather ->
}

Terrain is now {DisplayTerrain()}

{season != unknown_season:
    <> in {DisplaySeason()} ({DisplayWeather()})
}

->->

=== function DisplayTerrain() ===
{terrain:
    - unknown_terrain: ~ return "Unknown Terrain"
    - aquatic: ~ return "Aquatic"
    - coastal: ~ return "Coastal Wilderness"
    - desert: ~ return "Desert Wilderness"
    - dungeon: ~ return "Dungeon/Underdark"
    - forest: ~ return "Forest Wilderness"
    - grass: ~ return "Grassland Wilderness"
    - hill: ~ return "Hill Wilderness"
    - mountain: ~ return "Mountain/Ice Steppes"
    - swamp: ~ return "Swamp Wilderness"
    - urban: ~ return "Town/City"
    - else: ~ return "Invalid Setting"
}

=== function DisplayWeather() ===
~ return current_weather


=== function DisplayWeatherSummary() ===
{
    - season == unknown_season:
        ~ return "Unknown Weather/Season/Time"
    - season == unknown_season:
        ~ return DisplayTime()
    - else:
        ~ return "{DisplayWeather()} {DisplaySeason()} {DisplayTime()}"
}


=== function inWilderness() ===
~ return terrain != unknown_terrain && terrain != urban && terrain != dungeon

=== function GetRandomSeason() ===
{shuffle:
    - ~ return summer
    - ~ return autumn
    - ~ return winter
    - ~ return spring
}

=== edit_season ===
Current Season: {DisplaySeason()}
What season is it?

+ [Random]
    ~ season = GetRandomSeason()
+ [Summer]
    ~ season = summer
+ [Autumn]
    ~ season = autumn
+ [Winter]
    ~ season = winter
+ [Spring]
    ~ season = spring
+ [Back] ->->

-
-> roll_weather ->
Current Season: {DisplaySeason()}
->->


=== function DisplaySeason() ===
{season:
    - unknown_season: ~ return "Unknown Season"
    - summer: ~ return "Summer"
    - autumn: ~ return "Autumn"
    - winter: ~ return "Winter"
    - spring: ~ return "Spring"
    - else: ~ return "Invalid Setting"
}

=== edit_time ===
Current Time: {DisplayTime()}
What time is it?

+ [Random]
    {shuffle:
        - ~ time = day
        - ~ time = night
    }
+ [Day]
    ~ time = day
+ [Night]
    ~ time = night
+ [Back] ->->

- Current Time: {DisplayTime()}
->->

=== function DisplayTime() ===
{time:
    - day: ~ return "Day"
    - night: ~ return "Night"
    - else: ~ return "Invalid Setting"
}


=== edit_population ===
Current Population Density: {DisplayPopulation()}
How dense is the population in {DisplayTerrain()}?

+ [Random]
    {shuffle:
        - ~ population = pop_low
        - ~ population = pop_medium
        - ~ population = pop_high
    }
+ [Low]
    ~ population = pop_low
+ [Medium]
    ~ population = pop_medium
+ [High]
    ~ population = pop_high
+ [Back] ->->

- Current Population Density: {DisplayPopulation()}
->->


=== function DisplayPopulation() ===
{population:
    - pop_unknown: ~ return "Unknown Population Density"
    - pop_low: ~ return "Low"
    - pop_medium: ~ return "Medium"
    - pop_high: ~ return "High"
    - else: ~ return "Invalid Setting"
}

=== edit_survival ===
Survival = {stat_survival_bonus}

+ [Add 1]
    ~ stat_survival_bonus++
+ [Subtract 1]
    ~ stat_survival_bonus--
+ [Add 5]
    ~ stat_survival_bonus += 5
+ [Subtract 5]
    ~ stat_survival_bonus -= 5
+ [Back] ->->

- -> edit_survival


=== edit_level ===
Level = {stat_level}

+ {stat_level < 20}[Add 1]
    ~ stat_level++
+ {stat_level > 1}[Subtract 1]
    ~ stat_level--
+ {stat_level < 20}[Add 5]
    ~ stat_level += 5
+ {stat_level > 1}[Subtract 5]
    ~ stat_level -= 5
+ [Back] ->->

- 

{stat_level > 20:
    ~ stat_level = 20
}

{stat_level < 1:
    ~ stat_level = 1
}

-> edit_level


=== edit_party_size ===
Party Size = {stat_party_size}

+ {stat_party_size < 2}[Add 1]
    ~ stat_party_size++
+ {stat_party_size > 1}[Subtract 1]
    ~ stat_party_size--
+ [Back] ->->

- 

{stat_party_size > 2:
    ~ stat_party_size = 2
}

{stat_party_size < 1:
    ~ stat_party_size = 1
}

-> edit_party_size









=== edit_dungeon_size ===
Dungeon Size: {DisplayDungeonSize()}
What size is the dungeon?

+ [Random]
    {shuffle:
        - ~ dungeon_size = dng_tiny
        - ~ dungeon_size = dng_small
        - ~ dungeon_size = dng_medium
        - ~ dungeon_size = dng_large
        - ~ dungeon_size = dng_huge
        - ~ dungeon_size = dng_limitless
    }

+ [Tiny (1d4+2 rooms)]
    ~ dungeon_size = dng_tiny
+ [Small (1d6+4 rooms)]
    ~ dungeon_size = dng_small
+ [Medium (4d4+6 rooms)]
    ~ dungeon_size = dng_medium
+ [Large (5d6+23 rooms)]
    ~ dungeon_size = dng_large
+ [Huge (10d6+24 rooms)]
    ~ dungeon_size = dng_huge
+ [Limitless]
    ~ dungeon_size = dng_limitless
+ [Back] ->->

-
-> roll_dungeon_rooms ->
Dungeon Size: {DisplayDungeonSize()}
->->


=== function DisplayDungeonSize() ===
{dungeon_size:
    - dng_unknown: ~ return "Unknown"
    - dng_tiny: ~ return "Tiny"
    - dng_small: ~ return "Small"
    - dng_medium: ~ return "Medium"
    - dng_large: ~ return "Large"
    - dng_huge: ~ return "Huge"
    - dng_limitless: ~ return "Limitless"
    - else: ~logError("Unknown dungeon size {dungeon_size}.")
}




=== edit_dungeon_type ===
Dungeon Type: {DisplayDungeonType()}
What type of dungeon is this?

+ [Random]
    {shuffle:
        - ~ dungeon_type = dtype_lair
        - ~ dungeon_type = dtype_tomb
        - ~ dungeon_type = dtype_stronghold
        - ~ dungeon_type = dtype_temple
        - ~ dungeon_type = dtype_cave
        - ~ dungeon_type = dtype_maze
        - ~ dungeon_type = dtype_mine
        - ~ dungeon_type = dtype_planar
        - ~ dungeon_type = dtype_hq
        - ~ dungeon_type = dtype_trap
    }

+ [Lair]
    ~ dungeon_type = dtype_lair
+ [Tomb/Crypt]
    ~ dungeon_type = dtype_tomb
+ [Abandoned Stronghold]
    ~ dungeon_type = dtype_stronghold
+ [Temple or Shrine]
    ~ dungeon_type = dtype_temple
+ [Natural Caves]
    ~ dungeon_type = dtype_cave
+ [Maze]
    ~ dungeon_type = dtype_maze
+ [Mine]
    ~ dungeon_type = dtype_mine
+ [Planar Gate]
    ~ dungeon_type = dtype_planar
+ [Guild/Cult Headquarters]
    ~ dungeon_type = dtype_hq
+ [Death Trap]
    ~ dungeon_type = dtype_trap
+ [Back] ->->

-
-> roll_dungeon_rooms ->
Dungeon Type: {DisplayDungeonType()}
->->


=== function DisplayDungeonType() ===
{dungeon_type:
    - dtype_unknown: ~ return "Unknown"
    - dtype_lair: ~return "Lair"
    - dtype_tomb: ~return "Tomb/Crypt"
    - dtype_stronghold: ~return "Abandoned Stronghold"
    - dtype_temple: ~return "Temple or Shrine"
    - dtype_cave: ~return "Natural Caves"
    - dtype_maze: ~return "Maze"
    - dtype_mine: ~return "Mine"
    - dtype_planar: ~return "Planar Gate"
    - dtype_hq: ~return "Guild/Cult Headquarters"
    - dtype_trap: ~return "Death Trap"
    - else: ~logError("Unknown dungeon type {dungeon_type}.")
}



=== function DisplayDungeonSummary() ===
~ return "{DisplayDungeonSize()} {DisplayDungeonType()}"



